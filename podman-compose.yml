# Podman Compose configuration for Spending Transaction Monitor
# Uses IMAGE_TAG environment variable to control which image tags to use:
# - IMAGE_TAG=latest (default): Uses images from quay.io registry
# - IMAGE_TAG=local: Uses locally built images tagged as 'local'
services:
  postgres:
    image: postgres:16-alpine
    platform: linux/amd64
    container_name: postgres
    env_file:
      - .env.development
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-spending-monitor}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d spending-monitor"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - spending-monitor

  migrations:
    image: quay.io/rh-ai-quickstart/spending-monitor-db:${IMAGE_TAG:-latest}
    platform: linux/amd64
    container_name: spending-monitor-migrations
    env_file:
      - .env.development
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spending-monitor

  # SMTP Server for testing (smtp4dev)
  smtp4dev:
    image: rnwood/smtp4dev:latest
    platform: linux/amd64
    container_name: spending-monitor-smtp
    ports:
      - "3002:80"   # Web UI
      # smtp4dev listens on port 25 for incoming SMTP traffic.
      # Uncomment the following line to also accept SMTP traffic from the host on port 2525.
      # - "2525:25"
    networks:
      - spending-monitor

  # FastAPI Backend
  api:
    image: quay.io/rh-ai-quickstart/spending-monitor-api:${IMAGE_TAG:-latest}
    platform: linux/amd64
    # build:
    #   context: .
    #   dockerfile: packages/api/Containerfile
    container_name: spending-monitor-api
    env_file:
      - .env.development
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://user:password@postgres:5432/spending-monitor}
      - SMTP_HOST=${SMTP_HOST:-smtp4dev}
      - SMTP_PORT=${SMTP_PORT:-25}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL:-spending-monitor@localhost}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-false}
      - SMTP_USE_SSL=${SMTP_USE_SSL:-false}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - BYPASS_AUTH=${BYPASS_AUTH:-false}
      - API_PORT=${API_PORT:-8000}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-http://localhost:5173}
      - BASE_URL=${BASE_URL:-https://api.openai.com/v1}
      - API_KEY=${API_KEY:-your-openai-api-key-here}
      - MODEL=${MODEL:-gpt-3.5-turbo}
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - NODE_ENV=${NODE_ENV:-development}
      - KEYCLOAK_URL=${KEYCLOAK_URL:-http://localhost:8080}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-spending-monitor}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-spending-monitor}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      smtp4dev:
        condition: service_started
    networks:
      - spending-monitor

  # React Frontend
  ui:
    # image: quay.io/rh-ai-quickstart/spending-monitor-ui:${IMAGE_TAG:-latest}
    platform: linux/amd64
    build:
      context: .
      dockerfile: packages/ui/Containerfile
      args:
        - VITE_BYPASS_AUTH=${VITE_BYPASS_AUTH:-false}
        - VITE_ENVIRONMENT=${VITE_ENVIRONMENT:-production}
    container_name: spending-monitor-ui
    env_file:
      - .env.development
    depends_on:
      - api
    networks:
      - spending-monitor
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-/api}
      - VITE_BYPASS_AUTH=${VITE_BYPASS_AUTH:-false}
      - VITE_ENVIRONMENT=${VITE_ENVIRONMENT:-production}

  # Nginx reverse proxy to serve UI and proxy API
  nginx:
    image: nginx:alpine
    platform: linux/amd64
    container_name: spending-monitor-nginx
    ports:
      - "3000:80"
    depends_on:
      - ui
      - api
    networks:
      - spending-monitor
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

  # Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    platform: linux/amd64
    container_name: spending-monitor-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/spending-monitor
      KC_DB_USERNAME: user
      KC_DB_PASSWORD: password
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: "8080"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spending-monitor
    command: ["start-dev"]

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    platform: linux/amd64
    container_name: spending-monitor-pgadmin
    env_file:
      - .env.development
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8081:80"
    depends_on:
      - postgres
    networks:
      - spending-monitor
    profiles:
      - tools  # Only start with --profile tools

networks:
  spending-monitor:
    driver: bridge

volumes:
  postgres_data: